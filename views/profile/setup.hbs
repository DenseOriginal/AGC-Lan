<style>
  /* Hacky fix not aliging to middle */
  body > .page > .inner {
    height: 100%;
  }

  .setup {
    width: 100%;
    height: 100%;
    display: grid;
    place-items: center;
  }

  .setup-card {
    padding: 32px;
    width: min(95%, 550px);
    display: flex;
    justify-content: space-between;
  }

  .setup-card>.description {
    padding-left: 32px;
    border-left: var(--border-muted) 2px solid;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 40%;
  }

  .setup-card>.description>p {
    color: var(--muted-text);
    margin-bottom: 4px;
  }

  .setup-card>.description>p>a {
    color: var(--link-color);
  }

  .setup-card>form {
    margin-right: 32px;

    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    width: 59%;
  }
  
  @media only screen and (max-width: 630px) {
    .setup-card {
      flex-direction: column-reverse;
      align-items: center;
    }

    .setup-card>.description {
      margin-bottom: 32px;
      border: none;
      border-bottom: var(--border-muted) 2px solid;
      padding-left: 0;
      padding-bottom: 16px;
      width: min(100%, 300px);
    }

    .setup-card>form {
      width: min(100%, 300px);
      margin-right: 0;
    }
  }
</style>

<div class="setup">
  <div class="setup-card card not-padding">
    <form action="/profile/setup" id="setupForm" method="post">
      {{#each infoToCollect}}
      <div class="input">
        <input
          type="text"
          name="{{ this.name }}"
          id="{{ this.name }}"
          value="{{ this.value }}"
          placeholder="{{ this.placeholder }}"
          autocomplete="off"
          {{{ this.rest }}}
        >

        {{#if this.error}}
        <p class="error">{{ this.error }}</p>
        {{/if}}
      </div>
      {{/each}}
      <button type="submit">Opret</button>
    </form>

    <div class="description">
      <p>For at færdiggøre din profil mangler vi lige lidt mere information</p>
      <p>Når du klikker opret konto accepterer du vilkåerne i vores <a href="/policy"
          target="_blank">privatlivspolitik</a></p>
    </div>
  </div>
</div>

<script>
  // Create the dataset for all the classes

  // Generate all classes for the three current years, including grundforløb
  const thisYear = new Date().getFullYear().toString().slice(2);
  const classChars = ['A', 'B', 'C', 'D', 'E', 'J', 'P', 'R']

  const grundforløb = Array.from({ length: 8 }, (_, idx) => `${thisYear}HTXCG${idx + 1}`);
  const stamklasser = Array.from({ length: 3 }, (_, idx) => {
    const year = thisYear - idx;
    return classChars.map(char => `${year}HTXC${char}`);
  });

  // Prepend the grundforløb array to the stamklasser array
  stamklasser.unshift(grundforløb);

  // Append the two STX classses that go to the school
  // It's only two classes, so why bother adding it to the algorithm
  // And lærer
  stamklasser.push(["20STXCC", "20STXCX", "Lærer"]);

  // Flatten the array [[1], [2], [3]]   >>>   [1, 2, 3]
  const flattenedAray = [].concat(...stamklasser);

  document.getElementById('setupForm').insertAdjacentHTML('beforeend', `<datalist id="classes">
    ${flattenedAray.map(cur => `<option value="${cur}">`).join("")}
  </datalist>`);


</script>